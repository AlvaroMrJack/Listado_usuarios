"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tsquery_1 = require("@phenomnomnominal/tsquery");
var QueryInstance = /** @class */ (function () {
    function QueryInstance(node) {
        if (Array.isArray(node)) {
            this.nodes = node;
        }
        else {
            // @ts-ignore
            this.nodes = [node];
        }
    }
    QueryInstance.prototype.has = function (type, must) {
        var _this = this;
        if (must === void 0) { must = false; }
        if (must) {
            return type.every(function (t) { return _this.find(t).length > 0; });
        }
        else {
            return type.some(function (t) { return _this.find(t).length > 0; });
        }
    };
    QueryInstance.prototype.child = function (type) {
        var r = this.nodes.reduce(function (prev, node) {
            var nodes = tsquery_1.tsquery.query(node, type)
                // @ts-ignore
                .filter(function (n) { return n.parent.id == node.id; });
            prev = prev.concat(nodes);
            return prev;
        }, []);
        return $(r);
    };
    QueryInstance.prototype.find = function (type) {
        return $(this.nodes.reduce(function (prev, node) {
            var nodes = tsquery_1.tsquery.query(node, type);
            prev = prev.concat(nodes);
            return prev;
        }, []));
    };
    QueryInstance.prototype.closest = function (type) {
        var r = this.nodes.reduce(function (prev, node) {
            var current = node;
            var parent = node.parent;
            var match = [];
            var matched = false;
            // @ts-ignore
            while (!matched && parent.parent) {
                current = parent;
                parent = parent.parent;
                match = tsquery_1.tsquery.query(parent, type);
                // @ts-ignore
                matched = match.length > 0 && match.some(function (m) { return m.id == current.id; });
            }
            prev = prev.concat(match.filter(function (m) {
                // @ts-ignore
                return m.id == current.id;
            }));
            return prev;
        }, []);
        return $(r);
    };
    QueryInstance.prototype.filter = function (cb) {
        return $(this.nodes.filter(cb));
    };
    QueryInstance.prototype.map = function (cb) {
        return this.nodes.map(cb);
    };
    QueryInstance.prototype.each = function (cb) {
        this.nodes.forEach(cb);
        return this;
    };
    Object.defineProperty(QueryInstance.prototype, "length", {
        get: function () {
            return this.nodes.length;
        },
        enumerable: true,
        configurable: true
    });
    QueryInstance.prototype.index = function (index) {
        return this.nodes[index];
    };
    Object.defineProperty(QueryInstance.prototype, "self", {
        get: function () {
            return this.nodes;
        },
        enumerable: true,
        configurable: true
    });
    return QueryInstance;
}());
function $(node) {
    return new QueryInstance(node);
}
exports.$ = $;
