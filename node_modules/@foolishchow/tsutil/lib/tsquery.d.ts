import * as ts from "typescript";
declare class QueryInstance<T extends (ts.SourceFile | ts.Node) = (ts.SourceFile | ts.Node)> {
    private nodes;
    constructor(node: T | T[]);
    has(type: string[], must?: boolean): boolean;
    filter(cb: (item: T, index: number, arrar: T[]) => boolean): QueryInstance<T>;
    map<S>(cb: (item: T, index: number, arrar: T[]) => (S | void)): (void | S)[];
    each(cb: (item: T, index: number, arrar: T[]) => (T | void)): this;
    get length(): number;
    index(index: number): T;
    get self(): T[];
}
interface QueryInstance<T extends (ts.SourceFile | ts.Node) = (ts.SourceFile | ts.Node)> {
    find(type: "Identifier"): QueryInstance<ts.Identifier>;
    child(type: "Identifier"): QueryInstance<ts.Identifier>;
    closest(type: "Identifier"): QueryInstance<ts.Identifier>;
    find(type: "CallExpression"): QueryInstance<ts.CallExpression>;
    child(type: "CallExpression"): QueryInstance<ts.CallExpression>;
    closest(type: "CallExpression"): QueryInstance<ts.CallExpression>;
    find(type: "PropertyAccessExpression"): QueryInstance<ts.PropertyAccessExpression>;
    child(type: "PropertyAccessExpression"): QueryInstance<ts.PropertyAccessExpression>;
    closest(type: "PropertyAccessExpression"): QueryInstance<ts.PropertyAccessExpression>;
    find(type: "QualifiedName"): QueryInstance<ts.QualifiedName>;
    child(type: "QualifiedName"): QueryInstance<ts.QualifiedName>;
    closest(type: "QualifiedName"): QueryInstance<ts.QualifiedName>;
    find(type: "ImportClause"): QueryInstance<ts.ImportClause>;
    child(type: "ImportClause"): QueryInstance<ts.ImportClause>;
    closest(type: "ImportClause"): QueryInstance<ts.ImportClause>;
    find(type: "ImportDeclaration"): QueryInstance<ts.ImportDeclaration>;
    child(type: "ImportDeclaration"): QueryInstance<ts.ImportDeclaration>;
    closest(type: "ImportDeclaration"): QueryInstance<ts.ImportDeclaration>;
    find(type: "ClassDeclaration"): QueryInstance<ts.ClassDeclaration>;
    child(type: "ClassDeclaration"): QueryInstance<ts.ClassDeclaration>;
    closest(type: "ClassDeclaration"): QueryInstance<ts.ClassDeclaration>;
    find(type: "ModuleDeclaration"): QueryInstance<ts.ModuleDeclaration>;
    child(type: "ModuleDeclaration"): QueryInstance<ts.ModuleDeclaration>;
    closest(type: "ModuleDeclaration"): QueryInstance<ts.ModuleDeclaration>;
    find(type: "InterfaceDeclaration"): QueryInstance<ts.InterfaceDeclaration>;
    child(type: "InterfaceDeclaration"): QueryInstance<ts.InterfaceDeclaration>;
    closest(type: "InterfaceDeclaration"): QueryInstance<ts.InterfaceDeclaration>;
    find(type: string): QueryInstance<ts.Node>;
    child(type: string): QueryInstance<ts.Node>;
    closest(type: string): QueryInstance<ts.Node>;
}
export declare function $<T extends (ts.SourceFile | ts.Node) = (ts.SourceFile | ts.Node)>(node: T | T[]): QueryInstance<T>;
export {};
